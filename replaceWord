import java.util.List;

public class Solution {
    private TrieNode root;

    // TrieNode class definition
    public class TrieNode {
        TrieNode[] children;
        boolean isEnd;

        public TrieNode() {
            this.children = new TrieNode[26];
            this.isEnd = false;
        }
    }

    // Constructor initializes the root TrieNode
    public Solution() {
        this.root = new TrieNode();
    }

    // Method to insert a word into the Trie
    public void insert(String word) {
        TrieNode curr = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (curr.children[c - 'a'] == null) {
                curr.children[c - 'a'] = new TrieNode();
            }
            curr = curr.children[c - 'a'];
        }
        curr.isEnd = true;
    }

    // Method to replace words in the sentence
    public String replaceWords(List<String> dictionary, String sentence) {
        // Build the Trie with dictionary words
        for (String word : dictionary) {
            insert(word);
        }

        StringBuilder result = new StringBuilder();
        String[] strArr = sentence.split(" ");

        for (int i = 0; i < strArr.length; i++) {
            String word = strArr[i];
            StringBuilder replacement = new StringBuilder();
            TrieNode curr = root;

            // Try to build the shortest prefix from the Trie
            for (int j = 0; j < word.length(); j++) {
                char c = word.charAt(j);
                if (curr.children[c - 'a'] == null || curr.isEnd) {
                    break;
                }
                curr = curr.children[c - 'a'];
                replacement.append(c);

                if (curr.isEnd) {
                    break;
                }
            }

            if (curr.isEnd) {
                result.append(replacement);
            } else {
                result.append(word);
            }

            if (i < strArr.length - 1) {
                result.append(" ");
            }
        }

        return result.toString();
    }
}
